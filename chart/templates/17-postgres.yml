{{- $dirinit_image := .Values.image.dirinit_container_override | default (printf "%s/dirinit:%s" .Values.image.repository .Chart.AppVersion) }}
{{- $postgres_image := .Values.image.postgres_container_override | default (printf "%s/postgresql:%s" .Values.image.repository .Chart.AppVersion) }}
{{- if and .Values.postgres.enabled }}

{{- $claim := ternary .Values.storage.production.claims.postgres_claim .Values.storage.development.claims.postgres_claim .Values.is_production }}

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  ports:
    - port: 5432
      protocol: TCP
      name: postgresql
  selector:
    name: postgres-statefulset
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-headless
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 5432
      protocol: TCP
      name: postgresql
  selector:
    name: postgres-statefulset
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-statefulset
spec:
  selector:
    matchLabels:
      name: postgres-statefulset
  serviceName: postgres-headless
  volumeClaimTemplates:
    - metadata:
        name: {{ $claim.name }}-claim
      spec:
        storageClassName: {{ $claim.className }}
        accessModes:
          - {{ $claim.accessMode }}
        volumeMode: Filesystem
        resources:
          requests:
            storage: {{ $claim.size }}
        {{- if eq $claim.className "nfs" }}
        volumeName: {{ $claim.name }}-volume
        {{- end }}
  replicas: 1
  template:
    metadata:
      labels:
        name: postgres-statefulset
    spec:
      containers:
      - name: postgres-container
        image: "{{ $postgres_image }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        stdin: false
        tty: true
        ports:
          - name: postgresql
            protocol: TCP
            containerPort: 5432
        envFrom:
          - configMapRef:
              name: process-env
          - configMapRef:
              name: ssl-env
          - configMapRef:
              name: netbox-common-env
          - secretRef:
              name: postgres-env
        env:
          - name: VIRTUAL_HOST
            value: "postgres.malcolm.local"
        livenessProbe:
          exec:
            command:
            - /usr/local/bin/container_health.sh
          initialDelaySeconds: 90
          periodSeconds: 60
          timeoutSeconds: 15
          successThreshold: 1
          failureThreshold: 10
        volumeMounts:
          - mountPath: /var/local/ca-trust/configmap
            name: postgres-var-local-catrust-volume
          - mountPath: /var/lib/postgresql/data
            name: {{ $claim.name }}-claim
            subPath: postgres
      initContainers:
      - name: postgres-dirinit-container
        image: "{{ $dirinit_image }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        stdin: false
        tty: true
        securityContext:
          runAsGroup: 0
          runAsUser: 0
        envFrom:
          - configMapRef:
              name: process-env
        env:
          - name: PUSER_MKDIR
            value: "/data/config:postgres"
        volumeMounts:
          - name: {{ $claim.name }}-claim
            mountPath: "/data/config"
      volumes:
        - name: postgres-var-local-catrust-volume
          configMap:
            name: var-local-catrust
{{- end }}
